name: "SparseNet"

layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.0039215684 #map data from [0, 255] to [0, 1]
    mean_file: "data/mnist/mnist_mean.binaryproto"
  }
  data_param {
    source: "examples/mnist/mnist_train_50K_lmdb_100"
    batch_size: 50 # 2 GPUs makes batch_size=100
    backend: LMDB
  }
}

layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.0039215684 #map data from [0, 255] to [0, 1]
    mean_file: "/raid/dylan/mnist/mnist_mean.binaryproto"
  }
  data_param {
    source: "examples/mnist/mnist_val_10K_lmdb"
    batch_size: 50 # 2 GPUs makes batch_size=100
    backend: LMDB
  }
}

layer {
  name: "encode"
  type: "SparseApprox"
  bottom: "data"
  top: "encode"
  param {
    name: "phi"
    lr_mult: 1
    decay_mult: 1
  }
  param { 
    name: "bias"
    lr_mult: 1
    decay_mult: 0
  }
  sparse_approx_param {
    num_elements: 500
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_iterations: 10
    lambda: 0.01
    eta: 0.2
    gamma: 0
  }
}

layer {
  name: "decode"
  type: "InnerProduct"
  bottom: "encode"
  top: "decode"
  param {
    name: "phi"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    #name: "bias"
    lr_mult: 1
    decay_mult: 0
  }
  inner_product_param {
    num_output: 784
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "flatdata"
  type: "Flatten"
  bottom: "data"
  top: "flatdata"
}

layer {
  name: "euclidean_loss"
  type: "EuclideanLoss"
  bottom: "flatdata"
  bottom: "decode"
  top: "euclidean_loss"
  loss_weight: 0.1
}

layer {
    name: "relu"
    type: "ReLU"
    bottom: "encode"
    top: "encodeRelu"
}

layer {
    name: "id1"
    type: "InnerProduct"
    bottom: "encodeRelu"
    top: "id1"
    param {
        lr_mult: 1
        decay_mult: 0
    }
    param {
        lr_mult: 1
        decay_mult: 0
    }
    inner_product_param {
        num_output: 10
        weight_filler {
            type: "gaussian"
            std: 0.01
        }
        bias_filler {
            type: "constant"
            value: 0
        }
    }
}

layer {
    name: "accuracy"
    type: "Accuracy"
    bottom: "id1"
    bottom: "label"
    top: "accuracy"
    include {
        phase: TEST
    }
}

layer {
    name: "softmax_loss"
    type: "SoftmaxWithLoss"
    bottom: "id1"
    bottom: "label"
    top: "softmax_loss"
    loss_weight: 0.9
    loss_param {
        ignore_label: -1
        normalize: false 
    }
}
